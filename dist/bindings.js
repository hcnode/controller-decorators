"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const constants_1 = require("./constants");
/**
 * Given a list of params, execute each with the context.
 *
 * @param params
 * @param ctx
 * @param next
 */
function getArguments(params, ctx, next) {
    let args = [ctx, next];
    if (params) {
        args = [];
        // sort by index
        params.sort((a, b) => {
            return a.index - b.index;
        });
        for (const param of params) {
            let result;
            if (param !== undefined)
                result = param.fn(ctx);
            args.push(result);
        }
    }
    return args;
}
exports.getArguments = getArguments;
/**
 * Binds the routes to the router
 *
 * Example:
 *
 *    const router = new Router();
 *    bindRoutes(router, [ProfileController]);
 *
 * @export
 * @param {*} routerRoutes
 * @param {any[]} controllers
 * @param {(ctrl) => any} [getter]
 * @returns {*}
 */
function bindRoutes(routerRoutes, controllers, getter) {
    var reactRouters = [];
    for (const ctrl of controllers) {
        var routes = Reflect.getMetadata(constants_1.ROUTE_PREFIX, ctrl);
        if (routes) {
            ctrl[constants_1.ROUTE_PREFIX] = routes;
        }
        else {
            routes = ctrl[constants_1.ROUTE_PREFIX];
        }
        for (const { method, url, middleware, name, params, view, response } of routes) {
            if (view) {
                reactRouters.push({
                    component: view, path: url
                });
            }
            routerRoutes[method](url, ...middleware, async function (ctx, next) {
                const inst = getter === undefined ?
                    new ctrl() : getter(ctrl);
                const args = getArguments(params, ctx, next);
                const result = inst[name](...args);
                if (response) {
                    response(ctx, await result);
                }
                else {
                    if (result) {
                        ctx.body = await result;
                    }
                }
                return result;
            });
        }
    }
    return reactRouters;
}
exports.bindRoutes = bindRoutes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmluZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0QkFBMEI7QUFDMUIsMkNBQTJDO0FBRTNDOzs7Ozs7R0FNRztBQUNILHNCQUE2QixNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDNUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFdkIsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNWLElBQUksR0FBRyxFQUFFLENBQUM7UUFFVixnQkFBZ0I7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2YsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQSxDQUFDLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxNQUFNLENBQUM7WUFDWCxFQUFFLENBQUEsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO2dCQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEIsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQW5CRCxvQ0FtQkM7QUFFRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsb0JBQTJCLFlBQWlCLEVBQUUsV0FBa0IsRUFBRSxNQUFzQjtJQUN0RixJQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDdEIsR0FBRyxDQUFBLENBQUMsTUFBTSxJQUFJLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLHdCQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckQsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztZQUNkLElBQUksQ0FBQyx3QkFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLENBQUM7UUFBQSxJQUFJLENBQUEsQ0FBQztZQUNMLE1BQU0sR0FBRyxJQUFJLENBQUMsd0JBQVksQ0FBQyxDQUFDO1FBQzdCLENBQUM7UUFDRCxHQUFHLENBQUEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM5RSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDO2dCQUNQLFlBQVksQ0FBQyxJQUFJLENBQUM7b0JBQ2hCLFNBQVMsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLEdBQUc7aUJBQzdCLENBQUMsQ0FBQztZQUNMLENBQUM7WUFDRCxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsVUFBVSxFQUFFLEtBQUssV0FBVSxHQUFHLEVBQUUsSUFBSTtnQkFDL0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxLQUFLLFNBQVM7b0JBQy9CLElBQUksSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUU1QixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBQ25DLEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUM7b0JBQ1gsUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQyxDQUFBO2dCQUM3QixDQUFDO2dCQUFBLElBQUksQ0FBQSxDQUFDO29CQUNKLEVBQUUsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0JBQ1YsR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQztvQkFDMUIsQ0FBQztnQkFDSCxDQUFDO2dCQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQWpDRCxnQ0FpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0IHsgUk9VVEVfUFJFRklYIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIEdpdmVuIGEgbGlzdCBvZiBwYXJhbXMsIGV4ZWN1dGUgZWFjaCB3aXRoIHRoZSBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSBwYXJhbXNcbiAqIEBwYXJhbSBjdHhcbiAqIEBwYXJhbSBuZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcmd1bWVudHMocGFyYW1zLCBjdHgsIG5leHQpOiBhbnlbXSB7XG4gIGxldCBhcmdzID0gW2N0eCwgbmV4dF07XG5cbiAgaWYocGFyYW1zKSB7XG4gICAgYXJncyA9IFtdO1xuXG4gICAgLy8gc29ydCBieSBpbmRleFxuICAgIHBhcmFtcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgfSk7XG5cbiAgICBmb3IoY29uc3QgcGFyYW0gb2YgcGFyYW1zKSB7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgaWYocGFyYW0gIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcGFyYW0uZm4oY3R4KTtcbiAgICAgIGFyZ3MucHVzaChyZXN1bHQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmdzO1xufVxuXG4vKipcbiAqIEJpbmRzIHRoZSByb3V0ZXMgdG8gdGhlIHJvdXRlclxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgY29uc3Qgcm91dGVyID0gbmV3IFJvdXRlcigpO1xuICogICAgYmluZFJvdXRlcyhyb3V0ZXIsIFtQcm9maWxlQ29udHJvbGxlcl0pO1xuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gcm91dGVyUm91dGVzXG4gKiBAcGFyYW0ge2FueVtdfSBjb250cm9sbGVyc1xuICogQHBhcmFtIHsoY3RybCkgPT4gYW55fSBbZ2V0dGVyXVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kUm91dGVzKHJvdXRlclJvdXRlczogYW55LCBjb250cm9sbGVyczogYW55W10sIGdldHRlcj86IChjdHJsKSA9PiBhbnkpOiBhbnkge1xuICB2YXIgcmVhY3RSb3V0ZXJzID0gW107XG4gIGZvcihjb25zdCBjdHJsIG9mIGNvbnRyb2xsZXJzKSB7XG4gICAgdmFyIHJvdXRlcyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoUk9VVEVfUFJFRklYLCBjdHJsKTtcbiAgICBpZihyb3V0ZXMpe1xuXHRjdHJsW1JPVVRFX1BSRUZJWF0gPSByb3V0ZXM7XG4gICAgfWVsc2V7XG4gICAgXHRyb3V0ZXMgPSBjdHJsW1JPVVRFX1BSRUZJWF07XG4gICAgfVxuICAgIGZvcihjb25zdCB7IG1ldGhvZCwgdXJsLCBtaWRkbGV3YXJlLCBuYW1lLCBwYXJhbXMsIHZpZXcsIHJlc3BvbnNlIH0gb2Ygcm91dGVzKSB7XG4gICAgICBpZih2aWV3KXtcbiAgICAgICAgcmVhY3RSb3V0ZXJzLnB1c2goe1xuICAgICAgICAgIGNvbXBvbmVudCA6IHZpZXcsIHBhdGggOiB1cmxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByb3V0ZXJSb3V0ZXNbbWV0aG9kXSh1cmwsIC4uLm1pZGRsZXdhcmUsIGFzeW5jIGZ1bmN0aW9uKGN0eCwgbmV4dCkge1xuICAgICAgICBjb25zdCBpbnN0ID0gZ2V0dGVyID09PSB1bmRlZmluZWQgP1xuICAgICAgICAgIG5ldyBjdHJsKCkgOiBnZXR0ZXIoY3RybCk7XG5cbiAgICAgICAgY29uc3QgYXJncyA9IGdldEFyZ3VtZW50cyhwYXJhbXMsIGN0eCwgbmV4dCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGluc3RbbmFtZV0oLi4uYXJncyk7XG4gICAgICAgIGlmKHJlc3BvbnNlKXtcbiAgICAgICAgICByZXNwb25zZShjdHgsIGF3YWl0IHJlc3VsdClcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgaWYocmVzdWx0KSB7XG4gICAgICAgICAgICBjdHguYm9keSA9IGF3YWl0IHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVhY3RSb3V0ZXJzO1xufVxuIl19